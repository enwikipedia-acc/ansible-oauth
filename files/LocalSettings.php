<?php
# This file was generated by MediaWiki 1.38.5
# Managed by Ansible
if ( !defined( 'MEDIAWIKI' ) ) {
    exit;
}

$wikis = [
  'metawiki.sbx.aws.stwalkerster.cloud' => 'metawiki',
  'enwiki.sbx.aws.stwalkerster.cloud' => 'enwiki',
  'bnwiki.sbx.aws.stwalkerster.cloud' => 'bnwiki',
  'eswiki.sbx.aws.stwalkerster.cloud' => 'eswiki',
  'ruwiki.sbx.aws.stwalkerster.cloud' => 'ruwiki',
];

if ( defined( 'MW_DB' ) ) {
    // Automatically set from --wiki option to maintenance scripts
    $wikiID = MW_DB;
} else {
    // Use MW_DB environment variable or map the domain name
    $wikiID = $_SERVER['MW_DB'] ?? $wikis[ $_SERVER['SERVER_NAME'] ?? '' ] ?? null;
    if ( !$wikiID ) {
        die( 'Unknown wiki.' );
    }
}

$wgLocalDatabases = $wgConf->wikis = array_values($wikis);
$wgConf->suffixes = [ 'wiki' ];


$wgMetaNamespace = "OAuth_Test_Wiki";

$wgResourceBasePath = $wgScriptPath;
$wgLogos = [
    '1x' => "$wgResourceBasePath/resources/assets/change-your-logo.svg",
    'icon' => "$wgResourceBasePath/resources/assets/change-your-logo-icon.svg",
];

$wgEmergencyContact = "acc-oauth-wikis@sbx.aws.stwalkerster.cloud";
$wgPasswordSender = "acc-oauth-wikis@sbx.aws.stwalkerster.cloud";

$wgDBpassword = "wikiuser";
$wgDBname = $wikiID;
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";
// $wgSharedTables[] = "actor";

$wgMemCachedServers = [];
$wgLocaltimezone = "UTC";

$wgSecretKey = "e773a8f14c0ec3bd76585a06707607ef5446aef4fdecc667077c484697be67d1";

$wgAuthenticationTokenVersion = "1";

$wgCacheDirectory = "/tmp/mediawiki_cache/$wgDBname";
$wgUploadDirectory = "$IP/images/$wgDBname";
$wgUploadPath = "/w/images/$wgDBname";

$wgRightsPage = "";
$wgRightsUrl = "https://creativecommons.org/publicdomain/zero/1.0/";
$wgRightsText = "Creative Commons Zero (Public Domain)";
$wgRightsIcon = "$wgResourceBasePath/resources/assets/licenses/cc-0.png";

$wgDefaultSkin = "vector";
wfLoadSkin( 'Vector' );

wfLoadExtension( 'AntiSpoof' );
wfLoadExtension( 'CentralAuth' );
wfLoadExtension( 'CheckUser' );
wfLoadExtension( 'OAuth' );
wfLoadExtension( 'TitleBlacklist' );

// Caching setup
$wgObjectCaches['redis'] = array(
    'class'   => 'RedisBagOStuff',
    'servers' => array( '127.0.0.1:6379' ),
);

$wgMainCacheType = 'redis';
$wgSessionCacheType = 'redis';  // same as WMF prod

$wgEmailAuthentication = false;
$wgShowExceptionDetails = true;
$wgBlockDisablesLogin = true;

$wgConf->settings = [
    'wgServer' => [
        'default' => 'https://$wiki.sbx.aws.stwalkerster.cloud',
    ],
    'wgScriptPath' => [
        'default' => '/w'
    ],
    'wgArticlePath' => [
        'default' => '/wiki/$1',
    ],
    'wgSitename' => [
        'default' => 'CentralAuthTestWiki',
        'metawiki' => 'CentralAuth Metawiki',
        'enwiki' => 'OAuth Test Wiki',
    ],
    'wgLanguageCode' => [
        'default' => 'en',
        'eswiki' => 'es',
        'bnwiki' => 'bn',
    ],
    'wgDebugLogGroups' => [
        'default' => array(
            'exception' => '/var/log/mediawiki/$wiki-exception.log',
            'error' => '/var/log/mediawiki/$wiki-error.log',
            'OAuth' => '/var/log/mediawiki/$wiki-OAuth.log',
            'CentralAuth' => '/var/log/mediawiki/$wiki-CentralAuth.log',
        ),
    ],
    'wgDebugLogFile' => [
        'default' => "/var/log/mediawiki/debug.log",
    ],
];

function efGetSiteParams( $conf, $wiki ) {
    $site = null;
    $lang = null;
    foreach( $conf->suffixes as $suffix ) {
        if ( substr( $wiki, -strlen( $suffix ) ) === $suffix ) {
            $site = $suffix;
            $lang = substr( $wiki, 0, -strlen( $suffix ) );
            break;
        }
    }
    return [
        'suffix' => $site,
        'lang' => $lang,
        'params' => [
            'lang' => $lang,
            'site' => $site,
            'wiki' => $wiki,
        ],
        'tags' => [],
    ];
}

$wgConf->suffixes = $wgLocalDatabases;
$wgConf->siteParamsCallback = 'efGetSiteParams';
$wgConf->extractAllGlobals( $wgDBname );


// OAuth setup
$wgGroupPermissions['*']['createaccount'] = false;
$wgGroupPermissions['*']['edit'] = false;
$wgGroupPermissions['user']['mwoauthproposeconsumer'] = true;
$wgGroupPermissions['user']['mwoauthupdateownconsumer'] = true;
$wgGroupPermissions['user']['mwoauthmanageconsumer'] = true;
$wgGroupPermissions['user']['mwoauthmanagemygrants'] = true;
$wgGroupPermissions['suppress']['mwoauthsuppress'] = true;
$wgGroupPermissions['suppress']['mwoauthviewsuppressed'] = true;
$wgGroupPermissions['checkuser']['mwoauthviewprivate'] = true;
$wgMWOAuthSecureTokenTransfer = false;


